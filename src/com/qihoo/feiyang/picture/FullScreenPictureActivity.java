package com.qihoo.feiyang.picture;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.atomic.AtomicInteger;import android.app.Activity;import android.content.Context;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.Parcelable;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.view.View;import android.view.View.OnClickListener;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.qihoo.feiyang.R;import com.qihoo.feiyang.util.FileUtil;import com.qihoo.feiyang.util.StrongBoxAndFavoriteUtil;import com.qihoo.yunpan.sdk.android.GetNodeByNidAction;import com.qihoo.yunpan.sdk.android.config.YunpanSDKConfig;import com.qihoo.yunpan.sdk.android.http.action.FileDelete;import com.qihoo.yunpan.sdk.android.http.action.FileGetNodeByName;import com.qihoo.yunpan.sdk.android.http.action.FileGetNodeList;import com.qihoo.yunpan.sdk.android.http.model.FileNodeList;import com.qihoo.yunpan.sdk.android.http.model.GeneralInfo;import com.qihoo.yunpan.sdk.android.http.model.YunFile;import com.qihoo.yunpan.sdk.android.http.model.YunFileNode;import com.qihoo.yunpan.sdk.android.task.DownloadTask;import com.qihoo.yunpan.sdk.android.task.TransferStatus;import com.qihoo.yunpan.sdk.android.task.TransferStatus.ActionType;public class FullScreenPictureActivity extends Activity {	private List<Bundle> datas= new ArrayList<Bundle>();	private List<View> picts = new ArrayList<View>();		private ExecutorService exec = Executors.newFixedThreadPool(5);	private MyImageUpdateHandler handler = null;	private View info = null;	private View ops = null;	private ViewPager viewPager = null;	private int curIndex = 0;	private MyPagerAdapter adapter = null;	private Animation animation = null;	private AnimationController controller = new AnimationController();	private TextView photoName = null;	private TextView photoIndex = null;		private View photo_downLoad = null;	private View photo_favorite = null;	private View photo_share = null;	private View photo_encrypt = null;	private View photo_delete = null;		private ImageView file_if_favorited = null;		private Bundle currentBundle = null;	private DownLoadOriginPictureHandler downloadHandler = null;	private MovePictureToStrongBoxHandler moveStrongBoxHandler= null;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.photo_full);				animation = AnimationUtils.loadAnimation(this, R.anim.rotate_loading_anim);		animation.setInterpolator(new LinearInterpolator());				viewPager = (ViewPager) findViewById(R.id.photo_full_imageView);		info = findViewById(R.id.photo_info);		ops = findViewById(R.id.photo_operation);		photoIndex = (TextView) findViewById(R.id.photo_index);		photoName = (TextView) findViewById(R.id.photo_name);		handler = new MyImageUpdateHandler();		downloadHandler = new DownLoadOriginPictureHandler(this);		moveStrongBoxHandler = new MovePictureToStrongBoxHandler(this);				photo_downLoad = findViewById(R.id.photo_download);		photo_favorite = findViewById(R.id.photo_favorite);		photo_share = findViewById(R.id.photo_share);		photo_encrypt = findViewById(R.id.encrypt);		photo_delete = findViewById(R.id.photo_delete);		file_if_favorited = (ImageView) findViewById(R.id.file_if_favorited);				View back = (View) info.findViewById(R.id.photo_return);		back.setOnClickListener(new OnClickListener() {			public void onClick(View v) {				FullScreenPictureActivity.this.finish();			}		});				initPassArgument();		setViewerEvent();		setTitleInfo(curIndex);		adapter = new MyPagerAdapter();		viewPager.setAdapter(adapter);				viewPager.setCurrentItem(curIndex);		currentBundle = datas.get(curIndex);		LoadedImageView curImage = (LoadedImageView) picts.get(curIndex).findViewById(R.id.photo_full_item);		if (!curImage.isLoaded()) {			asyncLoadPhoto(curIndex);		}				setOpsEvenet();	}		private void asyncLoadPhoto(int index) {		Bundle bundle = datas.get(index);		View view = picts.get(index);		LoadedImageView imageView = (LoadedImageView) view.findViewById(R.id.photo_full_item);		exec.execute(new DownLoadPreview(handler, bundle, imageView));	}		/**	 * 初始化参数	 */	private void initPassArgument() {		//点击事件		OnClickListener listener = new View.OnClickListener() {			public void onClick(View v) {				int visible = info.getVisibility();				if (visible == View.VISIBLE) {					controller.slideFadeOut(info, 1000, 100);					controller.slideFadeOut(ops, 1000, 100);				} else {					controller.slideFadeIn(info, 1000, 100);					controller.slideFadeIn(ops, 1000, 100);				}			}		};				Bundle bundle = getIntent().getBundleExtra("data");		curIndex = bundle.getInt("index");		System.out.println(curIndex);		Parcelable[] ps = bundle.getParcelableArray("pictures");		for (Parcelable p : ps) {			Bundle b = (Bundle) p;			datas.add(b);			View view = getLayoutInflater().inflate(R.layout.photo_full_list_item, null);			LoadedImageView imageView = (LoadedImageView) view.findViewById(R.id.photo_full_item);			String nid = b.getString("nid");			boolean isFav = StrongBoxAndFavoriteUtil.ifFileIsFavorite(nid);			b.putBoolean("favorite", isFav);			Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));			if (map == null) {				imageView.setLoaded(false);				imageView.setImageResource(R.drawable.photo_loading);				imageView.startAnimation(animation);			} else {				imageView.setImageBitmap(map);				imageView.setLoaded(true);			}			view.setOnClickListener(listener);			picts.add(view);		}	}		private void deletePictureAndView(Bundle cur) {		String name = cur.getString("name");		String nid = cur.getString("nid");		FileDelete filedleDelete = new FileDelete();		filedleDelete.addDel_list(name);		GeneralInfo info = filedleDelete.doFileDelete();		if (info != null && info.errno != null && info.errno.equals(YunpanSDKConfig.RESULT_SUCCESS)) {			deleteViewInViewPager(cur);			StrongBoxAndFavoriteUtil.removeFileFromFavorite(nid);		} else {			Toast.makeText(FullScreenPictureActivity.this, 					"删除" + name + " 失败",Toast.LENGTH_SHORT).show();		}		}		private boolean justDeltePicture(Bundle cur) {		String name = cur.getString("name");		String nid = cur.getString("nid");				FileDelete filedleDelete = new FileDelete();		filedleDelete.addDel_list(name);		GeneralInfo info = filedleDelete.doFileDelete();		if (info != null && info.errno != null && info.errno.equals(YunpanSDKConfig.RESULT_SUCCESS)) {			StrongBoxAndFavoriteUtil.removeFileFromFavorite(nid);			return true;		} else {			return false;		}	}		/**	 * 删除图片	 */	private void deleteViewInViewPager(Bundle cur) {		int index = datas.indexOf(cur);		int pageIndex = adapter.removeView(viewPager, picts.get(index));		if (pageIndex == adapter.getCount()) pageIndex--;		curIndex = pageIndex;		viewPager.setCurrentItem(pageIndex);		if (datas.size() != 0) {			setTitleInfo(curIndex);			currentBundle = datas.get(pageIndex);		} else {			Toast.makeText(FullScreenPictureActivity.this, 					"已经没有图片了", Toast.LENGTH_SHORT).show();			setTitleInfoEmpty();		}	}		private void setOpsEvenet() {		photo_downLoad.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				if (currentBundle != null) {					Bundle cur = currentBundle;					String name = cur.getString("name");					String localFileName = FileUtil.getAppDownloadPath() + name;					File f = new File(localFileName);					if (f.exists()) {						Toast.makeText(FullScreenPictureActivity.this, 								"该图片已经下载过了", Toast.LENGTH_SHORT).show();					} else {						Toast.makeText(FullScreenPictureActivity.this, 								"正在下载", Toast.LENGTH_SHORT).show();						DownloadTask task = new DownloadTask(localFileName, name, downloadHandler);						exec.execute(task);					}				}			}		});				photo_delete.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				deletePictureAndView(currentBundle);			}		});				photo_favorite.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				// TODO				Bundle cur = currentBundle;				boolean fav = cur.getBoolean("favorite");				String nid = cur.getString("nid");				String fullName = cur.getString("name");				String pid = cur.getString("pid");				if (fav) {					//					StrongBoxAndFavoriteUtil.removeFileFromFavorite(nid);					file_if_favorited.setImageResource(R.drawable.file_not_favorited);				} else {					StrongBoxAndFavoriteUtil.addFileIntoFavorite(fullName, nid, pid);					file_if_favorited.setImageResource(R.drawable.file_favorited);				}				cur.putBoolean("favorite", !fav);			}		});				photo_share.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				Toast.makeText(FullScreenPictureActivity.this,						"还没做", Toast.LENGTH_SHORT).show();				// TODO			}		});				photo_encrypt.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				Bundle cur = currentBundle;				if (cur != null) {					String name = cur.getString("name");					String localFileName = FileUtil.getAppDownloadPath() + name;					Toast.makeText(FullScreenPictureActivity.this, 							"正在移动", Toast.LENGTH_SHORT).show();					moveStrongBoxHandler.addMovingPictures(cur);					DownloadTask task = new DownloadTask(localFileName, name, moveStrongBoxHandler);					exec.execute(task);					deleteViewInViewPager(cur);				}							}		});	}		/**	 * 设置标题栏的信息	 * @param index	 */	private void setTitleInfo(int index) {		Bundle bundle = datas.get(index);		String name = bundle.getString("name");		boolean favo = bundle.getBoolean("favorite");		int length = datas.size();		photoName.setText(FileUtil.getFileShortName(name));		photoIndex.setText((index+1) + "/" + length);		if (favo) {			file_if_favorited.setImageResource(R.drawable.file_favorited);		} else {			file_if_favorited.setImageResource(R.drawable.file_not_favorited);		}			}		private void setTitleInfoEmpty() {		photoName.setText("");		photoIndex.setText("");		file_if_favorited.setImageResource(R.drawable.file_not_favorited);	}		private void setViewerEvent() {		viewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {						public void onPageSelected(int index) {				setTitleInfo(index);				LoadedImageView curImage = (LoadedImageView) picts.get(index).findViewById(R.id.photo_full_item);				if (!curImage.isLoaded()) {					asyncLoadPhoto(index);				}				currentBundle = datas.get(index);			}						public void onPageScrolled(int arg0, float arg1, int arg2) {							}						public void onPageScrollStateChanged(int arg0) {							}		});			}		private class MyPagerAdapter extends PagerAdapter{		@Override		public int getCount() {			return picts.size();		}		@Override		public boolean isViewFromObject(View view, Object object) {			return view == object;		}				@Override		public Object instantiateItem(View container, int position) {			((ViewPager) container).addView(picts.get(position));			return picts.get(position);		}				@Override		public void destroyItem(View container, int position, Object view) {			((ViewPager) container).removeView(picts.get(position));		}				@Override		public void finishUpdate(View container) {			// TODO Auto-generated method stub			super.finishUpdate(container);		}				@Override		public void startUpdate(View container) {			// TODO Auto-generated method stub			super.startUpdate(container);		}				@Override		public int getItemPosition(Object object) {			int index = picts.indexOf(object);			if (index == -1) {				return POSITION_NONE;			}			return index;		}				public int removeView (ViewPager pager, View v)		{			return removeView (pager, picts.indexOf (v));		}				public int removeView (ViewPager pager, int position) {			pager.setAdapter (null);			picts.remove (position);			datas.remove(position);			pager.setAdapter (this);			return position;		}				public View getView (int position)		{		    return picts.get (position);		}	}		/**	 * 移动文件到保险箱，只能是内部类，因为需要调用删除方法	 * @author turing	 *	 */	class MovePictureToStrongBoxHandler extends Handler {		private Context context;		private List<Bundle> movingPicts = new ArrayList<Bundle>();				public MovePictureToStrongBoxHandler(Context context) {			this.context = context;		}				public void addMovingPictures(Bundle bundle) {			movingPicts.add(bundle);		}				@Override		public void handleMessage(Message msg) {			TransferStatus status = (TransferStatus) msg.obj;			if (status.actionType == ActionType.DOWNLOAD_COMPLETE) {				for (Bundle moving : movingPicts) {					String fullName = moving.getString("name");					String localFileName = FileUtil.getAppDownloadPath() + fullName;					if (localFileName.equals(status.localFileName)) {						// TODO 添加信息到数据库						String nid = moving.getString("nid");						String pid = moving.getString("pid");						if (StrongBoxAndFavoriteUtil.addPictureIntoStrongBox(fullName, nid, pid)) {							//							if (justDeltePicture(moving)) {								Toast.makeText(context, "成功移动" + status.remoteFileName + "到保险箱", 										Toast.LENGTH_SHORT).show();							} else {								Toast.makeText(context, "成功移动" + status.remoteFileName + "到保险箱失败", 										Toast.LENGTH_SHORT).show();							}							movingPicts.remove(moving);							return;						} else {							Toast.makeText(context, "成功移动" + status.remoteFileName + "到保险箱失败", 									Toast.LENGTH_SHORT).show();						}						movingPicts.remove(moving);						return;					}				}			}			// TODO 网络失败的情况下需要remove MovingPicts，否则内存泄露		}	}}class MyImageUpdateHandler extends Handler {	private Map<String, LoadedImageView> updateView = new ConcurrentHashMap<String, LoadedImageView>();		public void addUpdateView(String id, LoadedImageView view) {		updateView.put(id, view);	}		@Override	public void handleMessage(Message msg) {		Bundle bundle = msg.getData();		String nid = bundle.getString("nid");		String id = bundle.getString("id");		Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));		if (map != null) {			LoadedImageView view = updateView.get(id);			view.clearAnimation();			view.setImageBitmap(map);			view.setLoaded(true);			updateView.remove(id);		} else {			//网络故障		}	}}class DownLoadPreview implements Runnable {	private static AtomicInteger idGenerator = new AtomicInteger();	private MyImageUpdateHandler handler = null;	private Bundle data;	private LoadedImageView view;		public DownLoadPreview(MyImageUpdateHandler handler, Bundle data, LoadedImageView view) {		this.handler = handler;		this.data = data;		this.view = view;	}		public void run() {		String preview = data.getString("preview");		String nid = data.getString("nid");		String id = idGenerator.getAndDecrement() + "";		String fullName = data.getString("name");		if (preview == null || preview.equals("")) {			FileGetNodeList nodeList = new FileGetNodeList();			nodeList.setPreview(true);			nodeList.setThumb(true);			FileNodeList list = nodeList.getNodeList(FileUtil.getParentDirectoryFullName(fullName));			for (YunFile f :list.data.node_list) {				if(f.name.equals(fullName)) {					preview = f.preview;					break;				}			}		}		Bitmap map = FileUtil.getPreviewBitMapIfNecessary(preview, nid);		Message msg = handler.obtainMessage();		Bundle bundle = new Bundle();		bundle.putString("nid", nid);		bundle.putString("id", id);		msg.setData(bundle);				handler.addUpdateView(id, view);		handler.sendMessage(msg);	}}class DownLoadOriginPictureHandler extends Handler {	private Context context;	public DownLoadOriginPictureHandler(Context context) {		this.context = context;	}	@Override	public void handleMessage(Message msg) {		TransferStatus status = (TransferStatus) msg.obj;		if (status.actionType == ActionType.DOWNLOAD_COMPLETE) {			Toast.makeText(context, "已经下载" + status.localFileName, Toast.LENGTH_SHORT).show();		}	}}/*StringBuffer sb = new StringBuffer();			List<String> shareFileList = new ArrayList<String>();						for (int i = 0; i != fileList.size(); ++i){				if (fileList.get(i).isShare){					sb.append(fileList.get(i).filePath + "\n");					shareFileList.add(fileList.get(i).filePath);				}			}			LinkCreateFileData linkInfo = new LinkCreateFile().getFileLink(shareFileList);			String msgContent = "我用360云盘给你分享文件 http://yunpan.cn/" + linkInfo.data.shorturl								+ "，提取码：" + linkInfo.data.password + "【360】";			Uri uri = Uri.parse("smsto:");    		Intent intent = new Intent(Intent.ACTION_SENDTO, uri);   		    		intent.putExtra("sms_body", msgContent);    		getActivity().startActivity(intent);*/